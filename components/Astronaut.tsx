/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 astronaut.glb --types 
*/

import * as THREE from "three";
import React, { useMemo, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { SkeletonUtils } from "three/examples/jsm/Addons.js";
import { useGraph } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.SkinnedMesh;
    Cube001: THREE.SkinnedMesh;
    Cube002: THREE.SkinnedMesh;
    Cube003: THREE.SkinnedMesh;
    Cube004: THREE.SkinnedMesh;
    Cube005: THREE.SkinnedMesh;
    Cylinder: THREE.SkinnedMesh;
    mixamorigHips: THREE.Bone;
  };
  materials: {
    body: THREE.MeshStandardMaterial
    visor: THREE.MeshStandardMaterial
    Material: THREE.MeshStandardMaterial
  };
  animations: GLTFAction[];
};

type ActionName =
  | "backrun"
  | "idle"
  | "jump"
  | "punching"
  | "punchreact"
  | "run";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<
    JSX.IntrinsicElements["skinnedMesh"] | JSX.IntrinsicElements["bone"]
  >
>;

export function Astronaut({
  direction = [0, 0, 0],
  ...props
}: JSX.IntrinsicElements["group"] & { direction?: [number, number, number] }) {
  const group = useRef<THREE.Group | null>(null);
  const { animations,materials, scene } = useGLTF("models/astronaut2.glb") as GLTFResult;
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes } = useGraph(clone) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  const action = useMemo(() => {
    const [x, y, z] = direction;

    if (x === 0 && z === 0) return "idle";

    const quaternion = new THREE.Quaternion().setFromUnitVectors(
      new THREE.Vector3(0, 0, -1),
      new THREE.Vector3(x, 0, z).normalize()
    );

    group.current?.quaternion.copy(quaternion);

    return "run";
  }, [direction]);

  React.useEffect(() => {
    console.log(action);
    actions[action]?.play();

    return () => {
      actions[action]?.stop();
    };
  }, [actions, action]);



  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="idle" rotation={[Math.PI / 2, 0, Math.PI]} scale={2}>
          <primitive object={nodes.mixamorigHips} />
          
          <skinnedMesh name="Cube" geometry={nodes.Cube.geometry} material={materials.body} skeleton={nodes.Cube.skeleton} />
          <skinnedMesh name="Cube001" geometry={nodes.Cube001.geometry} material={materials.visor} skeleton={nodes.Cube001.skeleton} />
          <skinnedMesh name="Cube002" geometry={nodes.Cube002.geometry} material={materials.body} skeleton={nodes.Cube002.skeleton} />
          <skinnedMesh name="Cube003" geometry={nodes.Cube003.geometry} material={nodes.Cube003.material} skeleton={nodes.Cube003.skeleton} />
          <skinnedMesh name="Cube004" geometry={nodes.Cube004.geometry} material={materials.body} skeleton={nodes.Cube004.skeleton} />
          <skinnedMesh name="Cube005" geometry={nodes.Cube005.geometry} material={materials.Material} skeleton={nodes.Cube005.skeleton} />
          <skinnedMesh name="Cylinder" geometry={nodes.Cylinder.geometry} material={nodes.Cylinder.material} skeleton={nodes.Cylinder.skeleton} />
          {/* <skinnedMesh
            name="Cube"
            geometry={nodes.Cube.geometry}
            material={nodes.Cube.material}
            skeleton={nodes.Cube.skeleton}
          />
          <skinnedMesh
            name="Cube001"
            geometry={nodes.Cube001.geometry}
            material={nodes.Cube001.material}
            skeleton={nodes.Cube001.skeleton}
          />
          <skinnedMesh
            name="Cube002"
            geometry={nodes.Cube002.geometry}
            material={nodes.Cube002.material}
            skeleton={nodes.Cube002.skeleton}
          />
          <skinnedMesh
            name="Cube003"
            geometry={nodes.Cube003.geometry}
            material={nodes.Cube003.material}
            skeleton={nodes.Cube003.skeleton}
          />
          <skinnedMesh
            name="Cube004"
            geometry={nodes.Cube004.geometry}
            material={nodes.Cube004.material}
            skeleton={nodes.Cube004.skeleton}
          />
          <skinnedMesh
            name="Cube005"
            geometry={nodes.Cube005.geometry}
            material={nodes.Cube005.material}
            skeleton={nodes.Cube005.skeleton}
          />
          <skinnedMesh
            name="Cylinder"
            geometry={nodes.Cylinder.geometry}
            material={nodes.Cylinder.material}
            skeleton={nodes.Cylinder.skeleton}
          /> */}
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/astronaut.glb");
