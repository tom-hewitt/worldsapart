/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 finalgltfforreal.glb --types 
*/

import * as THREE from "three";
import React, { forwardRef, useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.SkinnedMesh;
    Cube001: THREE.SkinnedMesh;
    Cube002: THREE.SkinnedMesh;
    Cube003: THREE.SkinnedMesh;
    Cube004: THREE.SkinnedMesh;
    Cube005: THREE.SkinnedMesh;
    Cylinder: THREE.SkinnedMesh;
    mixamorigHips: THREE.Bone;
    mixamorigHips_1: THREE.Bone;
    mixamorigHips_2: THREE.Bone;
    mixamorigHips_3: THREE.Bone;
    mixamorigHips_4: THREE.Bone;
    mixamorigHips_5: THREE.Bone;
  };
  materials: {};
  animations: GLTFAction[];
};

type ActionName =
  | "backrun"
  | "idle"
  | "jump"
  | "punching"
  | "punchreact"
  | "run"
  | "run"
  | "jump"
  | "backrun"
  | "punching"
  | "punchreact";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<
    JSX.IntrinsicElements["skinnedMesh"] | JSX.IntrinsicElements["bone"]
  >
>;

export function Astronaut({
  action,
  ...props
}: JSX.IntrinsicElements["group"] & { action: ActionName }) {
  const group = useRef<THREE.Group | null>(null);
  const { nodes, materials, animations } = useGLTF(
    "/models/astronaut.glb"
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  useEffect(() => {
    actions.idle?.play();
  }, []);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="idle" rotation={[Math.PI / 2, 0, Math.PI]} scale={2}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh
            name="Cube"
            geometry={nodes.Cube.geometry}
            material={nodes.Cube.material}
            skeleton={nodes.Cube.skeleton}
          />
          <skinnedMesh
            name="Cube001"
            geometry={nodes.Cube001.geometry}
            material={nodes.Cube001.material}
            skeleton={nodes.Cube001.skeleton}
          />
          <skinnedMesh
            name="Cube002"
            geometry={nodes.Cube002.geometry}
            material={nodes.Cube002.material}
            skeleton={nodes.Cube002.skeleton}
          />
          <skinnedMesh
            name="Cube003"
            geometry={nodes.Cube003.geometry}
            material={nodes.Cube003.material}
            skeleton={nodes.Cube003.skeleton}
          />
          <skinnedMesh
            name="Cube004"
            geometry={nodes.Cube004.geometry}
            material={nodes.Cube004.material}
            skeleton={nodes.Cube004.skeleton}
          />
          <skinnedMesh
            name="Cube005"
            geometry={nodes.Cube005.geometry}
            material={nodes.Cube005.material}
            skeleton={nodes.Cube005.skeleton}
          />
          <skinnedMesh
            name="Cylinder"
            geometry={nodes.Cylinder.geometry}
            material={nodes.Cylinder.material}
            skeleton={nodes.Cylinder.skeleton}
          />
        </group>
        <group name="run" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips_1} />
        </group>
        <group name="jump" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips_2} />
        </group>
        <group name="backrun" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips_3} />
        </group>
        <group name="punching" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips_4} />
        </group>
        <group name="punchreact" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips_5} />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/finalgltfforreal.glb");
