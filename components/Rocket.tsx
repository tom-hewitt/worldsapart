/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 rocket.glb --types 
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Cylinder: THREE.Mesh;
    Cube: THREE.Mesh;
    window: THREE.Mesh;
    windowglass: THREE.Mesh;
    Cylinder001: THREE.Mesh;
    fire_emmiter: THREE.Mesh;
  };
  materials: {};
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Rocket(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/models/rocket.glb") as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.Cylinder.geometry}
        material={nodes.Cylinder.material}
        position={[0, 3.355, 0]}
        scale={[1, 2.555, 1]}
      />
      <mesh
        geometry={nodes.Cube.geometry}
        material={nodes.Cube.material}
        position={[-1.159, 1.675, 0]}
        scale={[0.641, 0.641, 0.094]}
      />
      <mesh
        geometry={nodes.window.geometry}
        material={nodes.window.material}
        position={[-1.274, 4.47, 0.011]}
        rotation={[0, 0, -1.572]}
        scale={[0.749, 0.327, 0.749]}
      />
      <mesh
        geometry={nodes.windowglass.geometry}
        material={nodes.windowglass.material}
        position={[-1.274, 4.47, 0.011]}
        rotation={[0, 0, -1.572]}
        scale={[0.749, 0.327, 0.749]}
      />
      <mesh
        geometry={nodes.Cylinder001.geometry}
        material={nodes.Cylinder001.material}
        position={[0, 3.355, 0]}
        scale={[1, 2.555, 1]}
      />
      <mesh
        geometry={nodes.fire_emmiter.geometry}
        material={nodes.fire_emmiter.material}
        position={[0, 1.841, 0]}
        scale={[2.217, 2.555, 2.011]}
      />
    </group>
  );
}

useGLTF.preload("/rocket.glb");
